Getting Started with Rails
http://guides.rubyonrails.org/getting_started.html

Books:
  Agile Web Development with Rails (4th edition) Sam Ruby
  Rails Recipes: Rails 3 Edition Chad Fowler

$ rvm list

  rvm rubies

     jruby-1.6.4 [ x86_64 ]
  => ruby-1.9.2-p290 [ x86_64 ]

$ rvm ruby-1.9.2
$ ruby -v
ruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-darwin11.2.0]

******

O aun mejor. En .bash_profile o .bashrc

rvm --default use 1.9.2

******

$ sudo rvm ruby-1.9.2 do  gem install rails


...............


$ rails -v
Rails 3.2.3

$ sqlite3 --version
3.6.19

*********************

[10:26][~/Dropbox/src/projects-ull-casiano/rails(master)]$ rails new blog

....
Enter your password to install the bundled RubyGems to your system: 
.....
Installing sqlite3 (1.3.5) with native extensions 
Installing uglifier (1.2.4) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

**********************

bundle is a ruby dependency managment system

**********************
rails new -h | less

$ cd blog
[11:39][~/Dropbox/src/projects-ull-casiano/rails/blog(master)]$ 

$ rake db:create

$ rails server
=> Booting WEBrick
=> Rails 3.2.3 application starting in development on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server
[2012-04-03 12:02:02] INFO  WEBrick 1.3.1
[2012-04-03 12:02:02] INFO  ruby 1.9.2 (2011-07-09) [x86_64-darwin11.2.0]
[2012-04-03 12:02:02] INFO  WEBrick::HTTPServer#start: pid=26787 port=3000

También:

            $ rails server -d

para ponerlo en background.

Cuando ponemos el navegador apuntando a http://0.0.0.0:3000

  Started GET "/assets/rails.png" for 127.0.0.1 at 2012-04-03 12:02:53 +0100
  Served asset /rails.png - 200 OK (32ms)

$ rails generate controller home index
      create  app/controllers/home_controller.rb
       route  get "home/index"
      invoke  erb
      create    app/views/home
      create    app/views/home/index.html.erb
      invoke  test_unit
      create    test/functional/home_controller_test.rb
      invoke  helper
      create    app/helpers/home_helper.rb
      invoke    test_unit
      create      test/unit/helpers/home_helper_test.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/home.js.coffee
      invoke    scss
      create      app/assets/stylesheets/home.css.scss

$ cat app/views/home/index.html.erb 
<h1>Home#index</h1>
<h1>Hello, Rails!</h1>
<p>Find me in app/views/home/index.html.erb</p>

$ head  public/index.html 
<!DOCTYPE html>
<html>
  <head>
    <title>Ruby on Rails: Welcome aboard</title>
    <style type="text/css" media="screen">
      body {
        margin: 0;
        margin-bottom: 25px;
        padding: 0;
        background-color: #f0f0f0;

$ rm public/index.html 

*********************
5 Getting Up and Running Quickly with Scaffolding

In the case of the blog application, you can start by generating a
scaffold for the Post resource: this will represent a single blog
posting.

  rails generate scaffold Post name:string title:string content:text

      invoke  active_record
      create    db/migrate/20120403113232_create_posts.rb
      create    app/models/post.rb
      ........................................

$ rake db:migrate
  ==  CreatePosts: migrating ====================================================
  -- create_table(:posts)
     -> 0.0010s
  ==  CreatePosts: migrated (0.0011s) ===========================================

$ cat app/views/home/index.html.erb 
<h1>Hello, Rails!</h1>

$ cat app/views/home/index.html.erb 
<h1>Hello, Rails!</h1>
<%= link_to "My Blog", posts_path %>

****************************************************************

Adding Some Validation

$ cat app/models/post.rb 
class Post < ActiveRecord::Base
  attr_accessible :content, :name, :title

  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
end

Ahora se validan las entradas conforme a la descripción

The console is a command-line tool that lets you execute Ruby code in the context of your application:

17:28][~/Dropbox/src/projects-ull-casiano/rails/blog(master)]$ rails console
  Loading development environment (Rails 3.2.3)
  ruby-1.9.2-p290 :001 > 

You can instead open a console that will roll back any changes you make by using 

                     rails console —sandbox


$ cat app/views/posts/index.html.erb
    <h1>Listing posts</h1>

    <table>
      <tr>
        <th>Name</th>
        <th>Title</th>
        <th>Content</th>
        <th></th>
        <th></th>
        <th></th>
      </tr>

    <% @posts.each do |post| %>
      <tr>
        <td><%= post.name %></td>
        <td><%= post.title %></td>
        <td><%= post.content %></td>
        <td><%= link_to 'Show', post %></td>
        <td><%= link_to 'Edit', edit_post_path(post) %></td>
        <td><%= link_to 'Destroy', post, confirm: 'Are you sure?', method: :delete %></td>
      </tr>
    <% end %>
    </table>

    <br />

    <%= link_to 'New Post', new_post_path %>

***************************************************
6.8 Customizing the Layout

Rails also has the concept of layouts, which are containers for views. 
When Rails renders a view to the browser, it does so by putting the view’s HTML into a layout’s HTML. 
An application specific layout is used for all the controllers and can be found in 
        app/views/layouts/application.html.erb. 

Open this layout in your editor and modify the body tag to include the style directive below:

$ vi app/views/layouts/application.html.erb 
$ cat app/views/layouts/application.html.erb 

<!DOCTYPE html>
<html>
<head>
  <title>Blog</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body style="background: gray;">

<%= yield %>

</body>
</html>



